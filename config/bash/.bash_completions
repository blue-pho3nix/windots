#!/usr/bin/env bash

# shellcheck disable=SC1090,SC1091

BASH_COMPLETIONS_DIR="$DOTFILES/config/bash/custom/completions"

# Git-For-Windows completion
if [ -f /usr/share/git/completion/git-completion.bash ]; then
	source /usr/share/git/completion/git-completion.bash
elif [ -f /mingw64/share/git/completion/git-completion.bash ]; then
	source /mingw64/share/git/completion/git-completion.bash
else
	source <(curl -s https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash)
fi

# set alias for git
alias g=git

# add completion for `git` alias
if type -t __git_complete &>/dev/null; then
	__git_complete g git
fi

# __ltrim_colon_completions: many completions required this function to work
# @param $1 current word to complete (cur)
# @modifies global array $COMPREPLY
__ltrim_colon_completions() {
	if [[ "$1" == *:* && "$COMP_WORDBREAKS" == *:* ]]; then
		# Remove colon-word prefix from COMPREPLY items
		local colon_word=${1%"${1##*:}"}
		local i=${#COMPREPLY[*]}
		while [[ $((--i)) -ge 0 ]]; do
			COMPREPLY[$i]=${COMPREPLY[$i]#"$colon_word"}
		done
	fi
}

command_exists() {
	command -v "$@" >/dev/null 2>&1
}

# python: `argcomplete` bash completion
if command_exists python; then
	# Get user's `site-packages` directory location
	user_site_packages_path="$(python -m site --user-site)"
	# Get `_python-argcomplete` file from argcomplete
	python_argcomplete_file="$(find "$user_site_packages_path" -type f -name '_python-argcomplete' | head -n 1)"
	if [[ -f "$python_argcomplete_file" ]]; then
		python_argcomplete_file="$(realpath "$python_argcomplete_file")"
		source "$python_argcomplete_file"
	fi

	unset user_site_packages_path python_argcomplete_file
fi

# source completion files in `BASH_COMPLETIONS_DIR`
for comp_file in "$BASH_COMPLETIONS_DIR"/*.bash; do
	cmd=$(basename "$comp_file")
	if command_exists "${cmd%.*}"; then
		source "$comp_file"
	fi
done

unset comp_file command_exists cmd
unset BASH_COMPLETIONS_DIR
