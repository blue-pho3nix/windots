#!/usr/bin/env bash

# shellcheck disable=SC1090,SC1091
# Builtin Git-Bash Completion
source /mingw64/share/git/completion/git-completion.bash

# __ltrim_colon_completions
if ! type __ltrim_colon_completions >/dev/null 2>&1; then
  # If the word-to-complete contains a colon (:), left-trim COMPREPLY items with
  # word-to-complete.
  # With a colon in COMP_WORDBREAKS, words containing
  # colons are always completed as entire words if the word to complete contains
  # a colon.  This function fixes this, by removing the colon-containing-prefix
  # from COMPREPLY items.
  # The preferred solution is to remove the colon (:) from COMP_WORDBREAKS in
  # your .bashrc:
  #
  #    # Remove colon (:) from list of word completion separators
  #    COMP_WORDBREAKS=${COMP_WORDBREAKS//:}
  #
  # See also: Bash FAQ - E13) Why does filename completion misbehave if a colon
  # appears in the filename? - http://tiswww.case.edu/php/chet/bash/FAQ
  # @param $1 current word to complete (cur)
  # @modifies global array $COMPREPLY
  #
  __ltrim_colon_completions() {
    if [[ "$1" == *:* && "$COMP_WORDBREAKS" == *:* ]]; then
      # Remove colon-word prefix from COMPREPLY items
      local colon_word=${1%"${1##*:}"}
      local i=${#COMPREPLY[*]}
      while [[ $((--i)) -ge 0 ]]; do
        COMPREPLY[$i]=${COMPREPLY[$i]#"$colon_word"}
      done
    fi
  }
fi

# Custom Locations for additional completion files
CUSTOM_COMPLETIONS="$DOTFILES/config/bash/custom/completions"

shopt -s extglob
for arg in $(compgen -ac | sort -u); do
  case "$arg" in
  __git_complete*) __git_complete g git ;;
  faas-cli?(.exe)) source <(faas-cli completion --shell bash) ;;
  oh-my-posh?(.exe)) source <(oh-my-posh completion bash) ;;
  gh?(.exe)) eval "$(gh completion -s bash)" ;;
  git-lfs?(.exe)) source <(git lfs completion bash) ;;
  gitleaks?(.exe)) source <(gitleaks completion bash) ;;
  glow?(.exe)) source <(glow completion bash) ;;
  gum?(.exe)) source <(gum completion bash) ;;
  ssh?(.exe)?*) . "$CUSTOM_COMPLETIONS/ssh.bash" ;;
  dotnet?(.exe)) . "$CUSTOM_COMPLETIONS/dotnet.bash" ;;
  docker?(.exe)) source <(docker completion bash) ;;
  hugo?(.exe)) source <(hugo completion bash) ;;
  kubectl?(.exe)) source <(kubectl completion bash) ;;
  @(bun)) source "$CUSTOM_COMPLETIONS/bun.bash" ;;
  @(npm)) source <(npm completion) ;;
  @(pnpm)) source <(pnpm completion bash) ;;
  @(yarn)) . "$CUSTOM_COMPLETIONS/yarn.bash" ;;
  pip?(3*)) . "$CUSTOM_COMPLETIONS/pip.bash" ;;
  pipenv*) eval "$(_PIPENV_COMPLETE=bash_source pipenv)" ;;
  pipx?(.exe)) eval "$(register-python-argcomplete pipx)" ;;
  pdm?(.exe)) source <(pdm completion bash) ;;
  terraform?(.exe)) complete -C "$(which terraform)" terraform ;;
  uv?(x)?(.exe)) source <(uv generate-shell-completion bash) ;;
  yq?(.exe)) source <(yq completion bash) ;;
  [Vv][Bb]ox[Mm]anage?(.exe)) . "$CUSTOM_COMPLETIONS/vboxmanage.bash" ;;
  # since we install vagrant with scoop
  vagrant?(.exe)) . "$(dirname "$(dirname "$(which scoop)")")/apps/vagrant/2.4.3/embedded/gems/gems/vagrant-2.4.3/contrib/bash/completion.sh" ;;
  esac
done
