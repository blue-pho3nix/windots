#!/usr/bin/env bash

function command_exists() {
  command -v "$@" >/dev/null 2>&1
}

##############################################################################################

# git
source /mingw64/share/git/completion/git-completion.bash

# Make Bash complete the `g` alias just like `git`
if type _git_complete &>/dev/null; then
  __git_complete g git
fi

# github cli
if command_exists gh; then
  eval "$(gh completion -s bash)"
fi

# git-lfs
if command_exists git-lfs; then
  source <(git lfs completion bash)
fi

# gitleaks
if command_exists gitleaks; then
  source <(gitleaks completion bash)
fi

# Oh-my-posh
if command_exists oh-my-posh; then
  source <(oh-my-posh completion bash)
fi

# docker
if command_exists docker; then
  source <(docker completion bash)
fi

# kubectl
if command_exists kubectl; then
  source <(kubectl completion bash)
fi

# vagrant
if command_exists vagrant; then
  . "C:/Program Files/Vagrant/embedded/gems/gems/vagrant-2.4.3/contrib/bash/completion.sh"
fi

# npm
if command_exists npm; then
  source <(npm completion)
fi

# pnpm
if command_exists pnpm; then
  source <(pnpm completion bash)
fi

# pip
if command_exists pip; then
  eval "$(pip completion --bash)"
fi

# pipenv
if command_exists pipenv; then
  eval "$(_PIPENV_COMPLETE=bash_source pipenv)"
fi

# yq
if command_exists yq; then
  source <(yq completion bash)
fi

# glow
if command_exists glow; then
  source <(glow completion bash)
fi

# gum
if command_exists gum; then
  source <(gum completion bash)
fi

##############################################################################################
unset -f command_exists

# Extra completions
if [ -d "$DOTFILES/config/bash/custom/completions" ]; then
  for file in "$DOTFILES/config/bash/custom/completions/"*.bash; do source "$file"; done
  unset file
fi
